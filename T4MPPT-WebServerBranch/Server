import socket
import threading
import urllib.request

HEADER = 64 #length of message
# step 1: get port and server
PORT = 5050
#SERVER = "192.168.56.1" hard code
#or
SERVER = socket.gethostbyname(socket.gethostname()) #automatically gets local ip address
ADDR = (SERVER, PORT) #binding
FORMAT = 'utf-8'
DISCONNECT_MESSAGE = "!DISCONNECT"


#step 2 pick socket and bind socket to address
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#creates the socket over family (category of addresses) AF_INET (over internet)
#socket.SOCK_STREAM: streaming data through socket (type or method)
server.bind(ADDR) #binds socket to this address

#step 3: set up socket for new connections
def handle_client(conn, addr): #will handle individual communication between client and server
     print(f"[NEW CONNECTION] {addr} connected. ")

     connected = True
     while connected:
         msg_length = conn.recv(HEADER).decode(FORMAT)
         if msg_length:
             msg_length = int(msg_length)
             msg = conn.recv(msg_length).decode(FORMAT)
             if msg == DISCONNECT_MESSAGE:
                 connected = False

             print(f"[{addr}] {msg}")
             conn.send("Msg received".encode(FORMAT))

     conn.close()



def start(): #starts server
    #this funciton will allow server to start listening to new connections
    #then it will pass new connections to handle_client
    #handle_client will run in a new thread
    server.listen()
    print(f"[LISTENING] Server is listening on {SERVER}")
    while True:
        conn, addr =  server.accept() #waits for new connection to the server
          # stores address and connection object (port and ip address)
            #handles new connections and distributes them
        thread = threading.Thread(target=handle_client, args=(conn, addr))

        thread.start()
        print(f"[ACTIVE CONNECITONS] {threading.activeCount() - 1} ") #shows active connections connected to the server


print("[STARTING} server is starting...")
start()

